{"version":3,"sources":["Components/NavBar.js","Components/Search.js","Components/Index.js","Components/AllDocuments.js","Components/Clear.js","Components/Document.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","linkStyle","color","textDecoration","style","background","textAlign","padding","to","Component","Search","state","word","references","onSearch","e","preventDefault","payload","axios","post","then","res","data","length","setState","alert","console","log","onChange","target","name","value","getStyle","borderBottom","onSubmit","this","display","type","flex","placeholder","className","map","reference","Index","docs","onIndex","height","AllDocuments","get","doc","Clear","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0106362.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    const headerStyle = {\r\n      background: \"#333\",\r\n      color: \"#fff\",\r\n      textAlign: \"center\",\r\n      padding: \"10px\"\r\n    };\r\n\r\n    const linkStyle = {\r\n      color: \"#fff\",\r\n      textDecoration: \"none\"\r\n    };\r\n    return (\r\n      <header style={headerStyle}>\r\n        <h1>TapSearch</h1>\r\n        <Link style={linkStyle} to=\"/index\">\r\n          Index\r\n        </Link>{\" \"}\r\n        |{\" \"}\r\n        <Link style={linkStyle} to=\"/search\">\r\n          Search\r\n        </Link>{\" \"}\r\n        |{\" \"}\r\n        <Link style={linkStyle} to=\"/getall\">\r\n          All Documents\r\n        </Link>{\" \"}\r\n        |{\" \"}\r\n        <Link style={linkStyle} to=\"/clear\">\r\n          Clear\r\n        </Link>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nexport class Search extends Component {\r\n  state = {\r\n    word: \"\",\r\n    references: []\r\n  };\r\n\r\n  onSearch = e => {\r\n    e.preventDefault();\r\n    var payload = {\r\n      word: this.state.word\r\n    };\r\n    axios.post(\"http://127.0.0.1:8000/api/search\", payload).then(res => {\r\n      if (res.data[\"docs\"].length !== 0) {\r\n        this.setState({ references: res.data[\"docs\"] });\r\n      } else {\r\n        this.setState({ word: \"\" });\r\n        this.setState({ references: [] });\r\n        alert(\"Error. Given word is not present in any document.\");\r\n      }\r\n      console.log(this.state.references);\r\n    });\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  getStyle = () => {\r\n    return {\r\n      background: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\"\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.onSearch} style={{ display: \"flex\" }}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"word\"\r\n            style={{ flex: \"10\", padding: \"5px\" }}\r\n            placeholder=\"Search the documents...\"\r\n            value={this.state.word}\r\n            onChange={this.onChange}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Search\"\r\n            className=\"btn\"\r\n            style={{ flex: \"1\" }}\r\n          />\r\n        </form>\r\n        {this.state.references.map(reference => (\r\n          <div style={this.getStyle()}>\r\n            <p>\r\n              No of Occurences: {reference[0]}\r\n              <br />\r\n              DocumentID: {reference[1]}\r\n              <br />\r\n              Document Text:{reference[2]}\r\n              {/* <form action={\"/document/\" + reference[1]}>\r\n                <input type=\"submit\" value=\"See the Document\" />\r\n              </form> */}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport class Index extends Component {\r\n  state = {\r\n    docs: \"\"\r\n  };\r\n\r\n  onIndex = e => {\r\n    e.preventDefault();\r\n    var payload = { data: this.state.docs };\r\n    axios.post(\"http://127.0.0.1:8000/api/index\", payload).then(res => {\r\n      if (res.data[\"status\"] === 1) {\r\n        alert(\"Sucessfully indexed.\");\r\n        this.setState({ docs: \"\" });\r\n      } else alert(\"Error. Index it again.\");\r\n    });\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.onIndex} style={{ display: \"flex\" }}>\r\n          <textarea\r\n            type=\"text\"\r\n            name=\"docs\"\r\n            style={{ flex: \"10\", padding: \"5px\", height: \"610px\" }}\r\n            placeholder=\"Index the documents.\"\r\n            value={this.state.docs}\r\n            onChange={this.onChange}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"IndexIt\"\r\n            className=\"btn\"\r\n            style={{ flex: \"1\", height: \"20px\" }}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport class AllDocuments extends Component {\r\n  state = {\r\n    docs: []\r\n  };\r\n\r\n  getStyle = () => {\r\n    return {\r\n      background: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\"\r\n    };\r\n  };\r\n\r\n  componentWillMount() {\r\n    axios.get(\"http://127.0.0.1:8000/api/getall\").then(res => {\r\n      this.setState({\r\n        docs: res.data[\"docs\"]\r\n      });\r\n      console.log(res.data[\"docs\"]);\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.docs.map(doc => (\r\n          <div style={this.getStyle()}>\r\n            <p>\r\n              DocumentID: {doc[0]}\r\n              <br />\r\n              Document: {doc[1]}\r\n              {/* <br />\r\n              <form action={\"/TapSearch/document/\" + doc[0]}>\r\n                <input type=\"submit\" value=\"See the Document\" />\r\n              </form> */}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllDocuments;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport class Clear extends Component {\r\n  componentWillMount() {\r\n    axios.get(\"http://127.0.0.1:8000/api/clear\");\r\n  }\r\n  render() {\r\n    return <div>All the indexes and documents are cleared.</div>;\r\n  }\r\n}\r\n\r\nexport default Clear;\r\n","import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\n\r\nexport class Document extends Component {\r\n  state = {\r\n    id: this.props.match.params.id,\r\n    text: \"\"\r\n  };\r\n\r\n  componentWillMount() {\r\n    Axios.get(\"http://127.0.0.1:8000/api/document/\" + this.state.id).then(\r\n      res => {\r\n        if (res.data[\"text\"].length === 0) {\r\n          alert(\"No such document!\");\r\n        } else {\r\n          this.setState({ text: res.data[\"text\"] });\r\n        }\r\n        console.log(res);\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.state.text}</div>;\r\n  }\r\n}\r\n\r\nexport default Document;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./Components/NavBar\";\r\nimport { Route, BrowserRouter } from \"react-router-dom\";\r\nimport Search from \"./Components/Search\";\r\nimport Index from \"./Components/Index\";\r\nimport AllDocuments from \"./Components/AllDocuments\";\r\nimport Document from \"./Components/Document\";\r\nimport Clear from \"./Components/Clear\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <NavBar />\r\n        <Route exact path=\"/search\" component={Search} />\r\n        <Route exact path=\"/index\" component={Index} />\r\n        <Route path=\"/getall\" component={AllDocuments} />\r\n        {/* <Route exact path=\"/document/:id\" component={Document} /> */}\r\n        <Route exact path=\"/clear\" component={Clear} />\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}